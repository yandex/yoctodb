0.0.20
  * ATTENTION! Incompatible format changes -- rebuild your databases
  * Ascending bitset index by @ya-goodfella in https://github.com/yandex/yoctodb/pull/35
  * Trie based index for key storage by @ya-goodfella in https://github.com/yandex/yoctodb/pull/36
  * Buffer deduplication for stored fields by @irenkamalova in https://github.com/yandex/yoctodb/pull/38
  * Reading primitives unsafe (natively through ByteBuffer API) by @sanekas in https://github.com/yandex/yoctodb/pull/43
  * Bump junit from 4.12 to 4.13.1 by @dependabot in https://github.com/yandex/yoctodb/pull/46

  ## New Contributors
  * @ya-goodfella made their first contribution in https://github.com/yandex/yoctodb/pull/35
  * @irenkamalova made their first contribution in https://github.com/yandex/yoctodb/pull/38
  * @sanekas made their first contribution in https://github.com/yandex/yoctodb/pull/43

  **Full Changelog**: https://github.com/yandex/yoctodb/compare/0.0.19...v0.0.20

0.0.19
  * ATTENTION! Incompatible format changes -- rebuild your databases
  * #33: Support for stored field values
  * Payloads are deprecated in favor of stored fields, but still supported

0.0.18
  * REVERTED #25: Switched to immutable org.roaringbitmap:RoaringBitmap implementation

0.0.17
  * #7: Cloneable query builders
  * #25: Switched to immutable org.roaringbitmap:RoaringBitmap implementation
  * #27: RoaringBitSetIndexToIndexMultiMap.getFilteredValues() speed up
  * #28: Removed extra BitSet init and postponed its allocation
  * Removed Java 8 dependencies
  * Switched to Java 7
  * Using org.jetbrains:annotations-java5 instead of org.jetbrains:annotations

0.0.16
  * AllocatingArrayBitSetPool is used by default

0.0.15
  * Support for size hint in ThreadLocalCachedArrayBitSetPool
  * Implemented RejectingArrayBitSetPool
  * #20: Implemented AllocatingArrayBitSetPool
  * #21: Implemented CachedArrayBitSetPool

0.0.14
  * #9: Support for a database of documents without payload
  * #10: Support for documents without fields
  * #19: Support for user-provided BitSet pool implementations

0.0.13
  * #11: More compact mutable `V1FilterableIndex` representation
  * #12: More compact mutable `IntIndexToIndexMultiMap` representation
  * #13: Nullify references to segments converted to `Writable` in `V1DatabaseBuilder`

0.0.12
  * #20: Support for retrieval of SORTABLE/FULL field values
  * UnsignedByteArray to primitive transformation

0.0.11
  * #24: Support for segments over 2 GB
  * #29: Using separate V1SortableIndex (same as V1FullIndex)
  * #33: unconstrained filtering queries
  * Faster composite DB document extraction
  * Full unit test coverage
  * Empty field name support

0.0.10
  * #27: Data race in FileChannelBuffer.get*(index)

0.0.9
  * #18: Using per database checksum instead of per segment ones

0.0.8
  * #26: Invalid invariant checking in SimpleRangeCondition

0.0.7
  * #17: Limited range of possible query ASTs
  * Allow to use not with general conditions
  * Buffer.get(buf, offset, length) method added

0.0.6
  * Fixed #17: Implemented `not` and `oneOf` query condition combinators

0.0.5
  * ATTENTION! Incompatible format changes -- rebuild your databases
  * #2: Implemented long-based ByteBuffer abstraction
  * #4: Some asserts became run-time checks
  * #6: Long-addressed payload segments
  * #8: Implemented FileChannelBuffer
  * #12: Added asserts in getSizeInBytes() for int32-only segments
  * Removed wrong assertions
  * Using guava 17.0
  * Using org.jetbrains:annotations
  * Removed dependency on slf4j-api
  * Switched to Mozilla Public License Version 2.0

0.0.4
  * Allowing for empty composite databases

0.0.3
  * Removed wrong assertion in search without sorts and limits

0.0.2
  * Skipping documents lacking queried fields

0.0.1
  * Initial release
